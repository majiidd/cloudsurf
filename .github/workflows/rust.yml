name: Rust CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  format:
    name: Check Formatting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Cache Cargo registry
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-
    
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt
        
    - name: Check format
      run: cargo fmt -- --check

  lint:
    name: Lint with Clippy
    runs-on: ubuntu-latest
    needs: format
    steps:
    - uses: actions/checkout@v3

    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-
    
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: clippy
        
    - name: Run Clippy
      run: cargo clippy -- -D warnings

  check:
    name: Check Compilation
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - uses: actions/checkout@v3

    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-
    
    - name: Check build
      run: cargo check

  test:
    name: Run Tests and Coverage
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    needs: check
    steps:
    - uses: actions/checkout@v3

    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-
    
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: llvm-tools-preview
        
    - name: Install grcov
      run: cargo install grcov

    - name: Build
      run: cargo build
      
    - name: Run tests
      run: cargo test

    - name: Create coverage directory
      run: mkdir -p ./coverage/
      
    - name: Generate coverage report
      run: |
        grcov . -s . -t lcov --llvm --branch --ignore-not-existing -o ./coverage/
        zip -0 ccov.zip $(find . \( -name "*.profraw" \) -print)
      shell: /usr/bin/bash -e {0}
      env:
        CARGO_TERM_COLOR: always
        RUSTFLAGS: -C instrument-coverage
        LLVM_PROFILE_FILE: coverage-%p-%m.profraw

  build-and-release:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-gnu
            os: windows-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true

    - name: Install cross
      run: cargo install cross

    - name: Build for ${{ matrix.target }}
      run: cross build --target ${{ matrix.target }} --release

    - name: Upload release artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.target }}
        path: target/${{ matrix.target }}/release/
